import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
TOKEN = "8019699528:AAE1LebzllSYMZxoX8X3-oEvrc8xfz9i6zQ"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –¥–ª—è –ø–∞—Ä–Ω–µ–π
responses_male = [
    "–¢–∏–≥—Ä üêÖ",
    "–ë—Ä–æ, –ª—É—á—à–∏–π! –î–∞–≤–∞–π 5 üôå",
    "–í—ã–ø—å–µ–º –ø–∏–≤–∫–∞ —Å —Ç–æ–±–æ–π –ø–æ—Å–ª–µ 6 üçª",
    "–ñ–º—É –ª–∞–ø—É, –±—Ä–æ üëä",
    "–û–±–Ω–∏–º–∞—é, –±—Ä–∞—Ç–∏—à–∫–∞ ü§ó",
    "–ú–æ—â–Ω–æ, –±—Ä–∞—Ç! üòé",
    "–¢–æ—á–Ω–æ –ø–æ –¥–µ–ª—É, –º–æ–ª–æ–¥–µ—Ü! üí™",
    "–¢–µ–±–µ —Ä–µ—Å–ø–µ–∫—Ç, –±—Ä–∞—Ç–∞–Ω! ‚úä",
    "–í –æ–≥–æ–Ω—å –ø–æ—à–µ–ª, –±—Ä–∞—Ç üî•",
    "–í–æ—Ç —ç—Ç–æ —Å—Ç–∏–ª—å, –¥–∞! üëå",
    "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ª–∏–¥–µ—Ä, –±—Ä–∞—Ç! üëë",
    "–î–∞–≤–∞–π —Ç–∞–∫ –∏ –¥–∞–ª—å—à–µ, –±—Ä–æ! üöÄ",
    "–†–µ—Å–ø–µ–∫—Ç —Ç–µ–±–µ, —á—É–≤–∞–∫! ‚úåÔ∏è",
    "–ü–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üèéÔ∏è",
    "–¢—ã –ª—É—á—à–∏–π –≤ –¥–µ–ª–µ! üéØ",
    "–ó–∞—á–µ—Ç, –≤–æ—Ç —ç—Ç–æ –ø–æ–¥—Ö–æ–¥! ‚úÖ",
    "–¢—ã –≤–æ–æ–±—â–µ –∫—Ä–∞—Å–∞–≤–∞, –±—Ä–∞—Ç! üåü",
    "–ù–∏–∫–∞–∫–∏—Ö —Ç–æ—Ä–º–æ–∑–æ–≤, –¥–∞–≤–∞–π –≤ —Ç–æ–ø! üèÅ",
    "–¢—ã –∫–∞–∫ –±–æ–µ—Ü, –Ω–µ —Å–¥–∞–µ—à—å—Å—è! ü•ä",
    "–¢—ã –≤ —Ç–æ–ø–µ, –±—Ä–∞—Ç! üèÜ",
    "–ö—Ä—É—Ç–æ, —á—Ç–æ —Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ! ü§ù",
    "–î–∞–≤–∞–π —Ç–∞–∫ –∏ –¥–∞–ª—å—à–µ, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è! üî•",
    "–¢—ã —Ä–µ–∞–ª—å–Ω–æ —Ç–∞—â–∏—à—å, –±—Ä–∞—Ç–∞–Ω! üí•",
    "–í—Å–µ –ø–æ –∫–∞–π—Ñ—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòé",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —Ç–æ–ø—á–∏–∫, –±—Ä–æ! üîù",
    "–ë–µ—Ä–∏ –ø—Ä–∏–º–µ—Ä —Å –º–µ–Ω—è, –±—Ä–∞—Ç! üìö",
    "–ú–æ–ª–æ–¥–µ—Ü, –≤–æ—Ç —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
]

# –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –¥–ª—è –¥–µ–≤—É—à–µ–∫
responses_female = [
    "–ö—Ä–∞—Å–æ—Ç–∫–∞, –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üíñ",
    "–£–º–Ω–∏—Ü–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! ‚ú®",
    "–ú–æ–ª–æ–¥—á–∏–Ω–∞, —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üòç",
    "–¢—ã —Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Ç–∞—è! üíÖ",
    "–î–∞–≤–∞–π —Ç–∞–∫ –∏ –¥–∞–ª—å—à–µ, –∫—Ä–∞—Å–æ—Ç–∫–∞! üíï",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üî•",
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–æ–ª–æ–¥–µ—Ü! üåü",
    "–ö—Ä–∞—Å–∞–≤–∏—Ü–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí´",
    "–¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è –∑–≤–µ–∑–¥–∞! ‚≠ê",
    "–í —ç—Ç–æ–º –Ω–µ—Ç —Å–æ–º–Ω–µ–Ω–∏–π, —Ç—ã –ª—É—á—à–∏–π! üí™",
    "–¢—ã —Ç–∞–∫–∞—è —è—Ä–∫–∞—è, –ø—Ä—è–º —Å–≤–µ—Ç–∏—à—å—Å—è! ‚ú®",
    "–¢—ã –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è! üåü",
    "–í–æ—Ç —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞! üíÉ",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üöÄ",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —à–∏–∫–∞—Ä–Ω–∞, —É—Ä–∞! üéâ",
    "–¢—ã –∫–∞–∫ –∞–ª–º–∞–∑, —Å–≤–µ—Ä–∫–∞–µ—à—å! üíé",
    "–¢—ã –≤ —Ç–æ–ø–µ, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üèÜ",
    "–° –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º —Ç—ã –≤—Å—ë –∫—Ä—É—á–µ! üëè",
    "–ö—Ä–∞—Å–æ—Ç–∫–∞, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üå∏",
    "–¢—ã ‚Äî —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–∏–º–µ—Ä! üí™",
    "–¢—ã –∫–∞–∫ —Ñ–µ—è, –≤–æ–ª—à–µ–±–Ω–∞—è! üßö‚Äç‚ôÄÔ∏è",
    "–¢—ã ‚Äî —Å—É–ø–µ—Ä, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏? üòò",
    "–î–∞–≤–∞–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
    "–¢—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üèÖ",
    "–¢—ã –æ–¥–Ω–∞ –∏–∑ –ª—É—á—à–∏—Ö! üåü",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ, —É–º–Ω–∏—á–∫–∞! üòç",
    "–¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞! üëë"
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
last_duplicate_time = 0

# –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
important_message = "‚ÄºÔ∏è–§–∏—Ç–æ–Ω–æ—Ä–º–∞–ª –∏ —Å–≤–∞–º–ø–≥–µ–ª—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å ‚ÄºÔ∏è\n\n" \
                    "3 –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞ \n\n" \
                    "‚úÖ–í–∞–ª—å–≥–æ—Ç–æ–Ω (–∫–æ—Å—Ç–æ—á–∫–∞ –Ω–∞ –Ω–æ–≥–µ)\n" \
                    "‚úÖ–í–µ–Ω–æ–ª–∏–¥ (–≤–∞—Ä–∏–∫–æ–∑)\n" \
                    "‚úÖ–ú–µ–Ω —Å–∞–π–∑ (–ø–æ—Ç–µ–Ω—Ü–∏—è)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def duplicate_message():
    global last_duplicate_time
    while True:
        current_time = asyncio.get_event_loop().time()
        if current_time - last_duplicate_time >= 3600:  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å
            try:
                await bot.send_message(chat_id="-1001697395203", text=important_message)  # ID —á–∞—Ç–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω –∑–¥–µ—Å—å
                last_duplicate_time = current_time
                logging.info("–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–æ.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def respond(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_gender = "male" if message.from_user.username[-1].lower() in "aeiou" else "female"
    
    if message.text in ["+1", "+2", "+1.5", "+1 –∫—É—Ä", "+1 –≥—É–º", "+1.5 –≥—É–º", "+1 –∫—Ä–æ—Å—Å"]:
        if user_gender == "male":
            response = random.choice(responses_male)
        else:
            response = random.choice(responses_female)
        await message.reply(response)
        await message.react([types.ReactionTypeEmoji(emoji="‚ù§Ô∏è")])

@dp.message(CommandStart())  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂. –ö–∞–∫ –¥–µ–ª–∞?")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def main():
    asyncio.create_task(duplicate_message())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
